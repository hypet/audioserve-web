/* tslint:disable */
/* eslint-disable */
/**
 * audioserve API
 * REST API for audioserve
 *
 * The version of the OpenAPI document: 1.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CollectionsInfo
 */
export interface CollectionsInfo {
    /**
     * Names of available collections
     * @type {Array<string>}
     * @memberof CollectionsInfo
     */
    names?: Array<string>;
    /**
     * Size of names array
     * @type {number}
     * @memberof CollectionsInfo
     */
    count?: number;
    /**
     * Is folder download endpoint enabled on server?
     * @type {boolean}
     * @memberof CollectionsInfo
     */
    folderDownload?: boolean;
    /**
     * Is playback position API enabled on server?
     * @type {boolean}
     * @memberof CollectionsInfo
     */
    sharedPositions?: boolean;
    /**
     * Version of audioserve (and thus also version of API)
     * @type {string}
     * @memberof CollectionsInfo
     */
    version?: string;
}

/**
 * Check if a given object implements the CollectionsInfo interface.
 */
export function instanceOfCollectionsInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CollectionsInfoFromJSON(json: any): CollectionsInfo {
    return CollectionsInfoFromJSONTyped(json, false);
}

export function CollectionsInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CollectionsInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'names': !exists(json, 'names') ? undefined : json['names'],
        'count': !exists(json, 'count') ? undefined : json['count'],
        'folderDownload': !exists(json, 'folder_download') ? undefined : json['folder_download'],
        'sharedPositions': !exists(json, 'shared_positions') ? undefined : json['shared_positions'],
        'version': !exists(json, 'version') ? undefined : json['version'],
    };
}

export function CollectionsInfoToJSON(value?: CollectionsInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'names': value.names,
        'count': value.count,
        'folder_download': value.folderDownload,
        'shared_positions': value.sharedPositions,
        'version': value.version,
    };
}

