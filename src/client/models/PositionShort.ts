/* tslint:disable */
/* eslint-disable */
/**
 * audioserve API
 * REST API for audioserve
 *
 * The version of the OpenAPI document: 1.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Last shared playback position within a folder.
 * Only available if group parameter was used and there are some audiofiles in the folder.
 * @export
 * @interface PositionShort
 */
export interface PositionShort {
    /**
     * Position timestamp - unix time in ms
     * Timestamp is generated on server, so if you post new  position 
     * it is used to check, if there is not newer position, 
     * but actual value then is assigned by server
     * @type {number}
     * @memberof PositionShort
     */
    timestamp: number;
    /**
     * Audio file (or chapter)
     * @type {string}
     * @memberof PositionShort
     */
    path: string;
    /**
     * Position in audiofile in seconds
     * @type {number}
     * @memberof PositionShort
     */
    position: number;
}

/**
 * Check if a given object implements the PositionShort interface.
 */
export function instanceOfPositionShort(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "timestamp" in value;
    isInstance = isInstance && "path" in value;
    isInstance = isInstance && "position" in value;

    return isInstance;
}

export function PositionShortFromJSON(json: any): PositionShort {
    return PositionShortFromJSONTyped(json, false);
}

export function PositionShortFromJSONTyped(json: any, ignoreDiscriminator: boolean): PositionShort {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'timestamp': json['timestamp'],
        'path': json['path'],
        'position': json['position'],
    };
}

export function PositionShortToJSON(value?: PositionShort | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'timestamp': value.timestamp,
        'path': value.path,
        'position': value.position,
    };
}

